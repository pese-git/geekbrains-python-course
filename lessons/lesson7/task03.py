# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется
# как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида **\n\n***..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: **\n\n.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: **\n\n***.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Organule:
    def __init__(self, count):
        self.count = count

    def __add__(self, organule):
        count = self.count + organule.count
        return Organule(count=count)

    def __sub__(self, organule):
        if self.count <= 0 or organule.count <= 0:
            raise RuntimeError("Кол-во ячеек в клетках должно быть больше 0")
        count = self.count - organule.count
        return Organule(count=count)

    def __mul__(self, organule):
        count = self.count * organule.count
        return Organule(count=count)

    def __truediv__(self, organule):
        count = self.count / organule.count
        return Organule(count=count)

    def make_order(self, columns=5):
        str = ''
        rows = int(self.count // columns)
        for i in range(0, rows):
            str += ''.join(['*' for _ in range(0, columns)]) + '\n'
        mod = int(self.count % columns)
        if mod > 0:
            str += ''.join(['*' for _ in range(0, mod)]) + '\n'
        print(str.strip())


if __name__ == '__main__':
    a = Organule(count=8)
    b = Organule(count=4)
    c = Organule(count=2)
    d = Organule(count=5)
    e = Organule(count=9)

    o = ((a + b) / c - d) * e
    print(o.count)
    o.make_order()
